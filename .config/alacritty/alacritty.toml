import = [
  "~/.config/alacritty/catppuccin.toml",
  #   "~/.config/alacritty/keybinds.toml",
]

# shell = "zsh"
# working_directory = "~"
# live_config_reload = true
# # Offer IPC using alacritty msg
# ipc_socket = true

# [env]
# WINIT_X11_SCALE_FACTOR = "1.0"

# WINDOW
# Window dimensions (changes require restart).
[window]
# Number of lines/columns (not pixels) in the terminal, while using a value of 0 for columns and lines will fall back to the window manager's recommended size
dimensions = { columns = 0, lines = 0 }
# Window startup position.
position = "None"
# Blank space added around the window in pixels
padding = { x = 5, y = 0 }
# Spread additional padding evenly around the terminal content
dynamic_padding = false
# "Full" borders and title bar | "None" neither borders nor title bar
decorations = "None"
# Background opacity, the value 0.0 is completely transparent and 1.0 is opaque
opacity = 1.0
# Window title
title = "Alacritty"
# Allow terminal applications to change Alacritty's window title
dynamic_title = false
# Window class
class = { instance = "Alacritty", general = "Alacritty" }

[scrolling]
# Maximum number of lines in the scrollback buffer.
history = 10000
# Number of line scrolled for every input scroll increment.
multiplier = 3

[font]
# normal = { family = "ComicShannsMono Nerd Font", style = "Regular" }
# bold = { family = "ComicShannsMono Nerd Font", style = "Bold" }
# italic = { family = "ComicShannsMono Nerd Font", style = "Italic" }
# bold_italic = { family = "ComicShannsMono Nerd Font", style = "Bold Italic" }
# size = 8.5
# extra space around each character
# offset = { x = 0, y = 6 }
normal = { family = "CaskaydiaCove Nerd Font", style = "Regular" }
bold = { family = "CaskaydiaCove Nerd Font", style = "Bold" }
italic = { family = "CaskaydiaCove Nerd Font", style = "Italic" }
bold_italic = { family = "CaskaydiaCove Nerd Font", style = "Bold Italic" }
size = 7.5
offset = { x = 0, y = 7 }
# Glyph offset determines the locations of the glyphs within their cells with the default being at the bottom. Increasing x moves the glyph to the right, increasing y moves the glyph upward.
glyph_offset = { x = 0, y = 0 }

#
#
# builtin_box_drawing = true | false
#
# When true, Alacritty will use a custom built-in font for box drawing characters (Unicode points U+2500 - U+259F) and powerline symbols (Unicode points U+E0B0 - U+E0B3).
#
# Default: true
#
# The indexed colors include all colors from 16 to 256. When these are not set, they're filled with sensible defaults.
# indexed_colors = [{ index = <integer>, color = "<string>" },]
# Default: []
# Whether or not window.opacity applies to all cell backgrounds, or only to the default background. When set to true all cells will be transparent regardless of their background color.
# transparent_background_colors = true | false
# Default: false
#
# draw_bold_text_with_bright_colors = true | false
#
# When true, bold text is drawn using the bright color variants.
#
# Default: false
#
# BELL
#
# This section documents the [bell] table of the configuration file.
#
# animation = "Ease" | "EaseOut" | "EaseOutSine" | "EaseOutQuad" | "EaseOutCubic" | "EaseOutQuart" | "EaseOutQuint" | "EaseOutExpo" | "EaseOutCirc" | "Linear"
#
# Visual bell animation effect for flashing the screen when the visual bell is rung.
#
# Default: "Linear"
#
# duration = <integer>
#
# Duration of the visual bell flash in milliseconds. A `duration` of `0` will disable the visual bell animation.
#
# Default: 0
#
# color = "<string>"
#
# Visual bell animation color.
#
# Default: "#ffffff"
#
# command = "<string>" | { program = "<string>", args = ["<string>",] }
#
# This program is executed whenever the bell is rung.
#
# When set to "None", no command will be executed.
#
# Default: "None"
#
# SELECTION
#
# This section documents the [selection] table of the configuration file.
#
# semantic_escape_chars = "<string>"
#
# This string contains all characters that are used as separators for "semantic words" in Alacritty.
#
# Default: ",│`|:\"' ()[]{}<>\t"
#
# save_to_clipboard = true | false
#
# When set to true, selected text will be copied to the primary clipboard.
#
# Default: false
#
# CURSOR
#
# This section documents the [cursor] table of the configuration file.
#
# style = { <shape>, <blinking> }
#
# shape = "Block" | "Underline" | "Beam"
#
# Default: "Block"
#
# blinking = "Never" | "Off" | "On" | "Always"
#
# Never
#
#             Prevent the cursor from ever blinking
#
# Off
#
#             Disable blinking by default
#
# On
#
#             Enable blinking by default
#
# Always
#
#             Force the cursor to always blink
#
# Default: "Off"
#
# vi_mode_style = { <shape>, <blinking> } | "None"
#
# If the vi mode cursor style is "None" or not specified, it will fall back to the active value of the normal cursor.
#
# Default: "None"
#
# blink_interval = <integer>
#
# Cursor blinking interval in milliseconds.
#
# Default: 750
#
# blink_timeout = <integer>
#
# Time after which cursor stops blinking, in seconds.
#
# Specifying 0 will disable timeout for blinking.
#
# Default: 5
#
# unfocused_hollow = true | false
#
# When this is true, the cursor will be rendered as a hollow box when the window is not focused.
#
# Default: true
#
# thickness = <float>
#
# Thickness of the cursor relative to the cell width as floating point number from 0.0 to 1.0.
#
# Default: 0.15
#
# TERMINAL
#
# This section documents the [terminal] table of the configuration file.
#
# osc52 = "Disabled" | "OnlyCopy" | "OnlyPaste" | "CopyPaste"
#
# Controls the ability to write to the system clipboard with the OSC 52 escape sequence. While this escape sequence is useful to copy contents from the remote server, allowing any application to read from the clipboard can be easily abused while not providing significant benefits over explicitly pasting text.
#
# Default: "OnlyCopy"
#
# MOUSE
#
# This section documents the [mouse] table of the configuration file.
#
# hide_when_typing = true | false
#
# When this is true, the cursor is temporarily hidden when typing.
#
# Default: false
#
# bindings = [{ <mouse>, <mods>, <mode>, <action> | <chars> },]
#
# See keyboard.bindings for full documentation on mods, mode, action, and chars.
#
# When an application running within Alacritty captures the mouse, the `Shift` modifier can be used to suppress mouse reporting. If no action is found for the event, actions for the event without the `Shift` modifier are triggered instead.
#
# mouse = "Middle" | "Left" | "Right" | "Back" | "Forward" | <integer>
#
# Mouse button which needs to be pressed to trigger this binding.
#
# action = <keyboard.bindings.action> | "ExpandSelection"
#
# ExpandSelection
#
#             Expand the selection to the current mouse cursor location.
#
# Example:
#
#         [mouse]
# bindings = [{ mouse = "Right", mods = "Control", action = "Paste" }]
#
# HINTS
#
# This section documents the [hints] table of the configuration file.
#
# Terminal hints can be used to find text or hyperlinks in the visible part of the terminal and pipe it to other applications.
#
# alphabet = "<string>"
#
# Keys used for the hint labels.
#
# Default: "jfkdls;ahgurieowpq"
#
# enabled = [{ <regex>, <hyperlinks>, <post_processing>, <persist>, <action>, <command> <binding>, <mouse> },]
#
# Array with all available hints.
#
# Each hint must have at least one of regex or hyperlinks and either an action or a command.
#
# regex = "<string>"
#
# Regex each line will be compared against.
#
# hyperlinks = true | false
#
# When this is true, all OSC 8 escape sequence hyperlinks will be included in the hints.
#
# post_processing = true | false
#
# When this is true, heuristics will be used to shorten the match if there are characters likely not to be part of the hint (e.g. a trailing .). This is most useful for URIs and applies only to regex matches.
#
# persist = true | false
#
# When this is true, hints remain persistent after selection.
#
# action = "Copy" | "Paste" | "Select" | "MoveViModeCursor"
#
# Copy
#
#             Copy the hint's text to the clipboard.
#
#         Paste
#
#             Paste the hint's text to the terminal or search.
#
# Select
#
#             Select the hint's text.
#
#         MoveViModeCursor
#
#             Move the vi mode cursor to the beginning of the hint.
#
#     command = "<string>" | { program = "<string>", args = ["<string>",] }
#
#         Command which will be executed when the hint is clicked or selected with the binding.
#
#         The hint's text is always attached as the last argument.
#
# binding = { key = "<string>", mods = "<string>", mode = "<string>" }
#
# See keyboard.bindings for documentation on available values.
#
# This controls which key binding is used to start the keyboard hint selection process.
#
# mouse = { mods = "<string>", enabled = true | false }
#
# See keyboard.bindings for documentation on available mods.
#
# The enabled field controls if the hint should be underlined when hovering over the hint text with all mods pressed.
#
# Default:
#
#         [[hints.enabled]]
# command = "xdg-open" # On Linux/BSD
# # command = "open" # On macOS
# # command = { program = "cmd", args = [ "/c", "start", "" ] } # On Windows
# hyperlinks = true
# post_processing = true
# persist = false
# mouse.enabled = true
# binding = { key = "U", mods = "Control|Shift" }
# regex = "(ipfs:|ipns:|magnet:|mailto:|gemini://|gopher://|https://|http://|news:|file:|git://|ssh:|ftp://)[^\u0000-\u001F\u007F-\u009F<>\"\\s{-}\\^⟨⟩`]+"
